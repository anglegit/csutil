// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ftp_rpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ftp_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ftp_rpc {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetailMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetailMessage_reflection_ = NULL;
struct DetailMessageOneofInstance {
  const ::ftp_model::DownloadReq* download_req_;
  const ::ftp_model::DownloadResp* download_resp_;
  const ::ftp_model::UploadReq* upload_req_;
  const ::ftp_model::UploadResp* upload_resp_;
}* DetailMessage_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_ftp_5frpc_2eproto() {
  protobuf_AddDesc_ftp_5frpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ftp_rpc.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, req_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, req_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, detail_message_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  DetailMessage_descriptor_ = file->message_type(1);
  static const int DetailMessage_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DetailMessage_default_oneof_instance_, download_req_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DetailMessage_default_oneof_instance_, download_resp_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DetailMessage_default_oneof_instance_, upload_req_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DetailMessage_default_oneof_instance_, upload_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailMessage, choice_),
  };
  DetailMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetailMessage_descriptor_,
      DetailMessage::default_instance_,
      DetailMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailMessage, _unknown_fields_),
      -1,
      DetailMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetailMessage, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetailMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ftp_5frpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetailMessage_descriptor_, &DetailMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ftp_5frpc_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete DetailMessage::default_instance_;
  delete DetailMessage_default_oneof_instance_;
  delete DetailMessage_reflection_;
}

void protobuf_AddDesc_ftp_5frpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ftp_model::protobuf_AddDesc_ftp_5fmodel_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rftp_rpc.proto\022\007ftp_rpc\032\017ftp_model.prot"
    "o\"h\n\007Message\022\n\n\002id\030\001 \001(\003\022\017\n\007req_sec\030\002 \001("
    "\r\022\020\n\010req_usec\030\003 \001(\r\022.\n\016detail_message\030\004 "
    "\001(\0132\026.ftp_rpc.DetailMessage\"\325\001\n\rDetailMe"
    "ssage\022.\n\014download_req\030\001 \001(\0132\026.ftp_model."
    "DownloadReqH\000\0220\n\rdownload_resp\030\002 \001(\0132\027.f"
    "tp_model.DownloadRespH\000\022*\n\nupload_req\030\003 "
    "\001(\0132\024.ftp_model.UploadReqH\000\022,\n\013upload_re"
    "sp\030\004 \001(\0132\025.ftp_model.UploadRespH\000B\010\n\006cho"
    "ice", 363);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ftp_rpc.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  DetailMessage::default_instance_ = new DetailMessage();
  DetailMessage_default_oneof_instance_ = new DetailMessageOneofInstance;
  Message::default_instance_->InitAsDefaultInstance();
  DetailMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ftp_5frpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ftp_5frpc_2eproto {
  StaticDescriptorInitializer_ftp_5frpc_2eproto() {
    protobuf_AddDesc_ftp_5frpc_2eproto();
  }
} static_descriptor_initializer_ftp_5frpc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Message::kIdFieldNumber;
const int Message::kReqSecFieldNumber;
const int Message::kReqUsecFieldNumber;
const int Message::kDetailMessageFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ftp_rpc.Message)
}

void Message::InitAsDefaultInstance() {
  detail_message_ = const_cast< ::ftp_rpc::DetailMessage*>(&::ftp_rpc::DetailMessage::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ftp_rpc.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  req_sec_ = 0u;
  req_usec_ = 0u;
  detail_message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:ftp_rpc.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete detail_message_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ftp_5frpc_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Message*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, req_usec_);
    if (has_detail_message()) {
      if (detail_message_ != NULL) detail_message_->::ftp_rpc::DetailMessage::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ftp_rpc.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_req_sec;
        break;
      }

      // optional uint32 req_sec = 2;
      case 2: {
        if (tag == 16) {
         parse_req_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_sec_)));
          set_has_req_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_req_usec;
        break;
      }

      // optional uint32 req_usec = 3;
      case 3: {
        if (tag == 24) {
         parse_req_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &req_usec_)));
          set_has_req_usec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_detail_message;
        break;
      }

      // optional .ftp_rpc.DetailMessage detail_message = 4;
      case 4: {
        if (tag == 34) {
         parse_detail_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ftp_rpc.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ftp_rpc.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ftp_rpc.Message)
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional uint32 req_sec = 2;
  if (has_req_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->req_sec(), output);
  }

  // optional uint32 req_usec = 3;
  if (has_req_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->req_usec(), output);
  }

  // optional .ftp_rpc.DetailMessage detail_message = 4;
  if (has_detail_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->detail_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ftp_rpc.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ftp_rpc.Message)
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional uint32 req_sec = 2;
  if (has_req_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->req_sec(), target);
  }

  // optional uint32 req_usec = 3;
  if (has_req_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->req_usec(), target);
  }

  // optional .ftp_rpc.DetailMessage detail_message = 4;
  if (has_detail_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->detail_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ftp_rpc.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional uint32 req_sec = 2;
    if (has_req_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_sec());
    }

    // optional uint32 req_usec = 3;
    if (has_req_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->req_usec());
    }

    // optional .ftp_rpc.DetailMessage detail_message = 4;
    if (has_detail_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_req_sec()) {
      set_req_sec(from.req_sec());
    }
    if (from.has_req_usec()) {
      set_req_usec(from.req_usec());
    }
    if (from.has_detail_message()) {
      mutable_detail_message()->::ftp_rpc::DetailMessage::MergeFrom(from.detail_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(req_sec_, other->req_sec_);
    std::swap(req_usec_, other->req_usec_);
    std::swap(detail_message_, other->detail_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetailMessage::kDownloadReqFieldNumber;
const int DetailMessage::kDownloadRespFieldNumber;
const int DetailMessage::kUploadReqFieldNumber;
const int DetailMessage::kUploadRespFieldNumber;
#endif  // !_MSC_VER

DetailMessage::DetailMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ftp_rpc.DetailMessage)
}

void DetailMessage::InitAsDefaultInstance() {
  DetailMessage_default_oneof_instance_->download_req_ = const_cast< ::ftp_model::DownloadReq*>(&::ftp_model::DownloadReq::default_instance());
  DetailMessage_default_oneof_instance_->download_resp_ = const_cast< ::ftp_model::DownloadResp*>(&::ftp_model::DownloadResp::default_instance());
  DetailMessage_default_oneof_instance_->upload_req_ = const_cast< ::ftp_model::UploadReq*>(&::ftp_model::UploadReq::default_instance());
  DetailMessage_default_oneof_instance_->upload_resp_ = const_cast< ::ftp_model::UploadResp*>(&::ftp_model::UploadResp::default_instance());
}

DetailMessage::DetailMessage(const DetailMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ftp_rpc.DetailMessage)
}

void DetailMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_choice();
}

DetailMessage::~DetailMessage() {
  // @@protoc_insertion_point(destructor:ftp_rpc.DetailMessage)
  SharedDtor();
}

void DetailMessage::SharedDtor() {
  if (has_choice()) {
    clear_choice();
  }
  if (this != default_instance_) {
  }
}

void DetailMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetailMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetailMessage_descriptor_;
}

const DetailMessage& DetailMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ftp_5frpc_2eproto();
  return *default_instance_;
}

DetailMessage* DetailMessage::default_instance_ = NULL;

DetailMessage* DetailMessage::New() const {
  return new DetailMessage;
}

void DetailMessage::clear_choice() {
  switch(choice_case()) {
    case kDownloadReq: {
      delete choice_.download_req_;
      break;
    }
    case kDownloadResp: {
      delete choice_.download_resp_;
      break;
    }
    case kUploadReq: {
      delete choice_.upload_req_;
      break;
    }
    case kUploadResp: {
      delete choice_.upload_resp_;
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHOICE_NOT_SET;
}


void DetailMessage::Clear() {
  clear_choice();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetailMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ftp_rpc.DetailMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ftp_model.DownloadReq download_req = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_download_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_download_resp;
        break;
      }

      // optional .ftp_model.DownloadResp download_resp = 2;
      case 2: {
        if (tag == 18) {
         parse_download_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_download_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_upload_req;
        break;
      }

      // optional .ftp_model.UploadReq upload_req = 3;
      case 3: {
        if (tag == 26) {
         parse_upload_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upload_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_upload_resp;
        break;
      }

      // optional .ftp_model.UploadResp upload_resp = 4;
      case 4: {
        if (tag == 34) {
         parse_upload_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upload_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ftp_rpc.DetailMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ftp_rpc.DetailMessage)
  return false;
#undef DO_
}

void DetailMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ftp_rpc.DetailMessage)
  // optional .ftp_model.DownloadReq download_req = 1;
  if (has_download_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->download_req(), output);
  }

  // optional .ftp_model.DownloadResp download_resp = 2;
  if (has_download_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->download_resp(), output);
  }

  // optional .ftp_model.UploadReq upload_req = 3;
  if (has_upload_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->upload_req(), output);
  }

  // optional .ftp_model.UploadResp upload_resp = 4;
  if (has_upload_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->upload_resp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ftp_rpc.DetailMessage)
}

::google::protobuf::uint8* DetailMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ftp_rpc.DetailMessage)
  // optional .ftp_model.DownloadReq download_req = 1;
  if (has_download_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->download_req(), target);
  }

  // optional .ftp_model.DownloadResp download_resp = 2;
  if (has_download_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->download_resp(), target);
  }

  // optional .ftp_model.UploadReq upload_req = 3;
  if (has_upload_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->upload_req(), target);
  }

  // optional .ftp_model.UploadResp upload_resp = 4;
  if (has_upload_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->upload_resp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ftp_rpc.DetailMessage)
  return target;
}

int DetailMessage::ByteSize() const {
  int total_size = 0;

  switch (choice_case()) {
    // optional .ftp_model.DownloadReq download_req = 1;
    case kDownloadReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->download_req());
      break;
    }
    // optional .ftp_model.DownloadResp download_resp = 2;
    case kDownloadResp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->download_resp());
      break;
    }
    // optional .ftp_model.UploadReq upload_req = 3;
    case kUploadReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upload_req());
      break;
    }
    // optional .ftp_model.UploadResp upload_resp = 4;
    case kUploadResp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upload_resp());
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetailMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetailMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetailMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetailMessage::MergeFrom(const DetailMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.choice_case()) {
    case kDownloadReq: {
      mutable_download_req()->::ftp_model::DownloadReq::MergeFrom(from.download_req());
      break;
    }
    case kDownloadResp: {
      mutable_download_resp()->::ftp_model::DownloadResp::MergeFrom(from.download_resp());
      break;
    }
    case kUploadReq: {
      mutable_upload_req()->::ftp_model::UploadReq::MergeFrom(from.upload_req());
      break;
    }
    case kUploadResp: {
      mutable_upload_resp()->::ftp_model::UploadResp::MergeFrom(from.upload_resp());
      break;
    }
    case CHOICE_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetailMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetailMessage::CopyFrom(const DetailMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetailMessage::IsInitialized() const {

  return true;
}

void DetailMessage::Swap(DetailMessage* other) {
  if (other != this) {
    std::swap(choice_, other->choice_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetailMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetailMessage_descriptor_;
  metadata.reflection = DetailMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ftp_rpc

// @@protoc_insertion_point(global_scope)
