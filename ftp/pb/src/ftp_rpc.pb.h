// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ftp_rpc.proto

#ifndef PROTOBUF_ftp_5frpc_2eproto__INCLUDED
#define PROTOBUF_ftp_5frpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "ftp_model.pb.h"
// @@protoc_insertion_point(includes)

namespace ftp_rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ftp_5frpc_2eproto();
void protobuf_AssignDesc_ftp_5frpc_2eproto();
void protobuf_ShutdownFile_ftp_5frpc_2eproto();

class Message;
class DetailMessage;

// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional uint32 req_sec = 2;
  inline bool has_req_sec() const;
  inline void clear_req_sec();
  static const int kReqSecFieldNumber = 2;
  inline ::google::protobuf::uint32 req_sec() const;
  inline void set_req_sec(::google::protobuf::uint32 value);

  // optional uint32 req_usec = 3;
  inline bool has_req_usec() const;
  inline void clear_req_usec();
  static const int kReqUsecFieldNumber = 3;
  inline ::google::protobuf::uint32 req_usec() const;
  inline void set_req_usec(::google::protobuf::uint32 value);

  // optional .ftp_rpc.DetailMessage detail_message = 4;
  inline bool has_detail_message() const;
  inline void clear_detail_message();
  static const int kDetailMessageFieldNumber = 4;
  inline const ::ftp_rpc::DetailMessage& detail_message() const;
  inline ::ftp_rpc::DetailMessage* mutable_detail_message();
  inline ::ftp_rpc::DetailMessage* release_detail_message();
  inline void set_allocated_detail_message(::ftp_rpc::DetailMessage* detail_message);

  // @@protoc_insertion_point(class_scope:ftp_rpc.Message)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_req_sec();
  inline void clear_has_req_sec();
  inline void set_has_req_usec();
  inline void clear_has_req_usec();
  inline void set_has_detail_message();
  inline void clear_has_detail_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::uint32 req_sec_;
  ::google::protobuf::uint32 req_usec_;
  ::ftp_rpc::DetailMessage* detail_message_;
  friend void  protobuf_AddDesc_ftp_5frpc_2eproto();
  friend void protobuf_AssignDesc_ftp_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ftp_5frpc_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class DetailMessage : public ::google::protobuf::Message {
 public:
  DetailMessage();
  virtual ~DetailMessage();

  DetailMessage(const DetailMessage& from);

  inline DetailMessage& operator=(const DetailMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetailMessage& default_instance();

  enum ChoiceCase {
    kDownloadReq = 1,
    kDownloadResp = 2,
    kUploadReq = 3,
    kUploadResp = 4,
    CHOICE_NOT_SET = 0,
  };

  void Swap(DetailMessage* other);

  // implements Message ----------------------------------------------

  DetailMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetailMessage& from);
  void MergeFrom(const DetailMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ftp_model.DownloadReq download_req = 1;
  inline bool has_download_req() const;
  inline void clear_download_req();
  static const int kDownloadReqFieldNumber = 1;
  inline const ::ftp_model::DownloadReq& download_req() const;
  inline ::ftp_model::DownloadReq* mutable_download_req();
  inline ::ftp_model::DownloadReq* release_download_req();
  inline void set_allocated_download_req(::ftp_model::DownloadReq* download_req);

  // optional .ftp_model.DownloadResp download_resp = 2;
  inline bool has_download_resp() const;
  inline void clear_download_resp();
  static const int kDownloadRespFieldNumber = 2;
  inline const ::ftp_model::DownloadResp& download_resp() const;
  inline ::ftp_model::DownloadResp* mutable_download_resp();
  inline ::ftp_model::DownloadResp* release_download_resp();
  inline void set_allocated_download_resp(::ftp_model::DownloadResp* download_resp);

  // optional .ftp_model.UploadReq upload_req = 3;
  inline bool has_upload_req() const;
  inline void clear_upload_req();
  static const int kUploadReqFieldNumber = 3;
  inline const ::ftp_model::UploadReq& upload_req() const;
  inline ::ftp_model::UploadReq* mutable_upload_req();
  inline ::ftp_model::UploadReq* release_upload_req();
  inline void set_allocated_upload_req(::ftp_model::UploadReq* upload_req);

  // optional .ftp_model.UploadResp upload_resp = 4;
  inline bool has_upload_resp() const;
  inline void clear_upload_resp();
  static const int kUploadRespFieldNumber = 4;
  inline const ::ftp_model::UploadResp& upload_resp() const;
  inline ::ftp_model::UploadResp* mutable_upload_resp();
  inline ::ftp_model::UploadResp* release_upload_resp();
  inline void set_allocated_upload_resp(::ftp_model::UploadResp* upload_resp);

  inline ChoiceCase choice_case() const;
  // @@protoc_insertion_point(class_scope:ftp_rpc.DetailMessage)
 private:
  inline void set_has_download_req();
  inline void set_has_download_resp();
  inline void set_has_upload_req();
  inline void set_has_upload_resp();

  inline bool has_choice();
  void clear_choice();
  inline void clear_has_choice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union ChoiceUnion {
    ::ftp_model::DownloadReq* download_req_;
    ::ftp_model::DownloadResp* download_resp_;
    ::ftp_model::UploadReq* upload_req_;
    ::ftp_model::UploadResp* upload_resp_;
  } choice_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_ftp_5frpc_2eproto();
  friend void protobuf_AssignDesc_ftp_5frpc_2eproto();
  friend void protobuf_ShutdownFile_ftp_5frpc_2eproto();

  void InitAsDefaultInstance();
  static DetailMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// optional int64 id = 1;
inline bool Message::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Message::id() const {
  // @@protoc_insertion_point(field_get:ftp_rpc.Message.id)
  return id_;
}
inline void Message::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ftp_rpc.Message.id)
}

// optional uint32 req_sec = 2;
inline bool Message::has_req_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_req_sec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_req_sec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_req_sec() {
  req_sec_ = 0u;
  clear_has_req_sec();
}
inline ::google::protobuf::uint32 Message::req_sec() const {
  // @@protoc_insertion_point(field_get:ftp_rpc.Message.req_sec)
  return req_sec_;
}
inline void Message::set_req_sec(::google::protobuf::uint32 value) {
  set_has_req_sec();
  req_sec_ = value;
  // @@protoc_insertion_point(field_set:ftp_rpc.Message.req_sec)
}

// optional uint32 req_usec = 3;
inline bool Message::has_req_usec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_req_usec() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_req_usec() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_req_usec() {
  req_usec_ = 0u;
  clear_has_req_usec();
}
inline ::google::protobuf::uint32 Message::req_usec() const {
  // @@protoc_insertion_point(field_get:ftp_rpc.Message.req_usec)
  return req_usec_;
}
inline void Message::set_req_usec(::google::protobuf::uint32 value) {
  set_has_req_usec();
  req_usec_ = value;
  // @@protoc_insertion_point(field_set:ftp_rpc.Message.req_usec)
}

// optional .ftp_rpc.DetailMessage detail_message = 4;
inline bool Message::has_detail_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_detail_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_detail_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_detail_message() {
  if (detail_message_ != NULL) detail_message_->::ftp_rpc::DetailMessage::Clear();
  clear_has_detail_message();
}
inline const ::ftp_rpc::DetailMessage& Message::detail_message() const {
  // @@protoc_insertion_point(field_get:ftp_rpc.Message.detail_message)
  return detail_message_ != NULL ? *detail_message_ : *default_instance_->detail_message_;
}
inline ::ftp_rpc::DetailMessage* Message::mutable_detail_message() {
  set_has_detail_message();
  if (detail_message_ == NULL) detail_message_ = new ::ftp_rpc::DetailMessage;
  // @@protoc_insertion_point(field_mutable:ftp_rpc.Message.detail_message)
  return detail_message_;
}
inline ::ftp_rpc::DetailMessage* Message::release_detail_message() {
  clear_has_detail_message();
  ::ftp_rpc::DetailMessage* temp = detail_message_;
  detail_message_ = NULL;
  return temp;
}
inline void Message::set_allocated_detail_message(::ftp_rpc::DetailMessage* detail_message) {
  delete detail_message_;
  detail_message_ = detail_message;
  if (detail_message) {
    set_has_detail_message();
  } else {
    clear_has_detail_message();
  }
  // @@protoc_insertion_point(field_set_allocated:ftp_rpc.Message.detail_message)
}

// -------------------------------------------------------------------

// DetailMessage

// optional .ftp_model.DownloadReq download_req = 1;
inline bool DetailMessage::has_download_req() const {
  return choice_case() == kDownloadReq;
}
inline void DetailMessage::set_has_download_req() {
  _oneof_case_[0] = kDownloadReq;
}
inline void DetailMessage::clear_download_req() {
  if (has_download_req()) {
    delete choice_.download_req_;
    clear_has_choice();
  }
}
inline const ::ftp_model::DownloadReq& DetailMessage::download_req() const {
  return has_download_req() ? *choice_.download_req_
                      : ::ftp_model::DownloadReq::default_instance();
}
inline ::ftp_model::DownloadReq* DetailMessage::mutable_download_req() {
  if (!has_download_req()) {
    clear_choice();
    set_has_download_req();
    choice_.download_req_ = new ::ftp_model::DownloadReq;
  }
  return choice_.download_req_;
}
inline ::ftp_model::DownloadReq* DetailMessage::release_download_req() {
  if (has_download_req()) {
    clear_has_choice();
    ::ftp_model::DownloadReq* temp = choice_.download_req_;
    choice_.download_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DetailMessage::set_allocated_download_req(::ftp_model::DownloadReq* download_req) {
  clear_choice();
  if (download_req) {
    set_has_download_req();
    choice_.download_req_ = download_req;
  }
}

// optional .ftp_model.DownloadResp download_resp = 2;
inline bool DetailMessage::has_download_resp() const {
  return choice_case() == kDownloadResp;
}
inline void DetailMessage::set_has_download_resp() {
  _oneof_case_[0] = kDownloadResp;
}
inline void DetailMessage::clear_download_resp() {
  if (has_download_resp()) {
    delete choice_.download_resp_;
    clear_has_choice();
  }
}
inline const ::ftp_model::DownloadResp& DetailMessage::download_resp() const {
  return has_download_resp() ? *choice_.download_resp_
                      : ::ftp_model::DownloadResp::default_instance();
}
inline ::ftp_model::DownloadResp* DetailMessage::mutable_download_resp() {
  if (!has_download_resp()) {
    clear_choice();
    set_has_download_resp();
    choice_.download_resp_ = new ::ftp_model::DownloadResp;
  }
  return choice_.download_resp_;
}
inline ::ftp_model::DownloadResp* DetailMessage::release_download_resp() {
  if (has_download_resp()) {
    clear_has_choice();
    ::ftp_model::DownloadResp* temp = choice_.download_resp_;
    choice_.download_resp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DetailMessage::set_allocated_download_resp(::ftp_model::DownloadResp* download_resp) {
  clear_choice();
  if (download_resp) {
    set_has_download_resp();
    choice_.download_resp_ = download_resp;
  }
}

// optional .ftp_model.UploadReq upload_req = 3;
inline bool DetailMessage::has_upload_req() const {
  return choice_case() == kUploadReq;
}
inline void DetailMessage::set_has_upload_req() {
  _oneof_case_[0] = kUploadReq;
}
inline void DetailMessage::clear_upload_req() {
  if (has_upload_req()) {
    delete choice_.upload_req_;
    clear_has_choice();
  }
}
inline const ::ftp_model::UploadReq& DetailMessage::upload_req() const {
  return has_upload_req() ? *choice_.upload_req_
                      : ::ftp_model::UploadReq::default_instance();
}
inline ::ftp_model::UploadReq* DetailMessage::mutable_upload_req() {
  if (!has_upload_req()) {
    clear_choice();
    set_has_upload_req();
    choice_.upload_req_ = new ::ftp_model::UploadReq;
  }
  return choice_.upload_req_;
}
inline ::ftp_model::UploadReq* DetailMessage::release_upload_req() {
  if (has_upload_req()) {
    clear_has_choice();
    ::ftp_model::UploadReq* temp = choice_.upload_req_;
    choice_.upload_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DetailMessage::set_allocated_upload_req(::ftp_model::UploadReq* upload_req) {
  clear_choice();
  if (upload_req) {
    set_has_upload_req();
    choice_.upload_req_ = upload_req;
  }
}

// optional .ftp_model.UploadResp upload_resp = 4;
inline bool DetailMessage::has_upload_resp() const {
  return choice_case() == kUploadResp;
}
inline void DetailMessage::set_has_upload_resp() {
  _oneof_case_[0] = kUploadResp;
}
inline void DetailMessage::clear_upload_resp() {
  if (has_upload_resp()) {
    delete choice_.upload_resp_;
    clear_has_choice();
  }
}
inline const ::ftp_model::UploadResp& DetailMessage::upload_resp() const {
  return has_upload_resp() ? *choice_.upload_resp_
                      : ::ftp_model::UploadResp::default_instance();
}
inline ::ftp_model::UploadResp* DetailMessage::mutable_upload_resp() {
  if (!has_upload_resp()) {
    clear_choice();
    set_has_upload_resp();
    choice_.upload_resp_ = new ::ftp_model::UploadResp;
  }
  return choice_.upload_resp_;
}
inline ::ftp_model::UploadResp* DetailMessage::release_upload_resp() {
  if (has_upload_resp()) {
    clear_has_choice();
    ::ftp_model::UploadResp* temp = choice_.upload_resp_;
    choice_.upload_resp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DetailMessage::set_allocated_upload_resp(::ftp_model::UploadResp* upload_resp) {
  clear_choice();
  if (upload_resp) {
    set_has_upload_resp();
    choice_.upload_resp_ = upload_resp;
  }
}

inline bool DetailMessage::has_choice() {
  return choice_case() != CHOICE_NOT_SET;
}
inline void DetailMessage::clear_has_choice() {
  _oneof_case_[0] = CHOICE_NOT_SET;
}
inline DetailMessage::ChoiceCase DetailMessage::choice_case() const {
  return DetailMessage::ChoiceCase(_oneof_case_[0]);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace ftp_rpc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ftp_5frpc_2eproto__INCLUDED
