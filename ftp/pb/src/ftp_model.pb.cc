// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ftp_model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ftp_model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ftp_model {

namespace {

const ::google::protobuf::Descriptor* DownloadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ftp_5fmodel_2eproto() {
  protobuf_AddDesc_ftp_5fmodel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ftp_model.proto");
  GOOGLE_CHECK(file != NULL);
  DownloadReq_descriptor_ = file->message_type(0);
  static const int DownloadReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadReq, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadReq, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadReq, len_),
  };
  DownloadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadReq_descriptor_,
      DownloadReq::default_instance_,
      DownloadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadReq));
  DownloadResp_descriptor_ = file->message_type(1);
  static const int DownloadResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadResp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadResp, ret_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadResp, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadResp, total_file_size_),
  };
  DownloadResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadResp_descriptor_,
      DownloadResp::default_instance_,
      DownloadResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadResp));
  UploadReq_descriptor_ = file->message_type(2);
  static const int UploadReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadReq, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadReq, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadReq, len_),
  };
  UploadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadReq_descriptor_,
      UploadReq::default_instance_,
      UploadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadReq));
  UploadResp_descriptor_ = file->message_type(3);
  static const int UploadResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadResp, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadResp, ret_msg_),
  };
  UploadResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadResp_descriptor_,
      UploadResp::default_instance_,
      UploadResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ftp_5fmodel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadReq_descriptor_, &DownloadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadResp_descriptor_, &DownloadResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadReq_descriptor_, &UploadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadResp_descriptor_, &UploadResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ftp_5fmodel_2eproto() {
  delete DownloadReq::default_instance_;
  delete DownloadReq_reflection_;
  delete DownloadResp::default_instance_;
  delete DownloadResp_reflection_;
  delete UploadReq::default_instance_;
  delete UploadReq_reflection_;
  delete UploadResp::default_instance_;
  delete UploadResp_reflection_;
}

void protobuf_AddDesc_ftp_5fmodel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ftp_model.proto\022\tftp_model\"<\n\013Download"
    "Req\022\021\n\tfile_name\030\001 \001(\014\022\r\n\005start\030\002 \001(\003\022\013\n"
    "\003len\030\003 \001(\003\"[\n\014DownloadResp\022\020\n\010ret_code\030\001"
    " \001(\005\022\017\n\007ret_msg\030\002 \001(\014\022\017\n\007content\030\003 \001(\014\022\027"
    "\n\017total_file_size\030\004 \001(\003\":\n\tUploadReq\022\021\n\t"
    "file_name\030\001 \001(\014\022\r\n\005start\030\002 \001(\005\022\013\n\003len\030\003 "
    "\001(\005\"/\n\nUploadResp\022\020\n\010ret_code\030\001 \001(\005\022\017\n\007r"
    "et_msg\030\002 \001(\014", 292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ftp_model.proto", &protobuf_RegisterTypes);
  DownloadReq::default_instance_ = new DownloadReq();
  DownloadResp::default_instance_ = new DownloadResp();
  UploadReq::default_instance_ = new UploadReq();
  UploadResp::default_instance_ = new UploadResp();
  DownloadReq::default_instance_->InitAsDefaultInstance();
  DownloadResp::default_instance_->InitAsDefaultInstance();
  UploadReq::default_instance_->InitAsDefaultInstance();
  UploadResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ftp_5fmodel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ftp_5fmodel_2eproto {
  StaticDescriptorInitializer_ftp_5fmodel_2eproto() {
    protobuf_AddDesc_ftp_5fmodel_2eproto();
  }
} static_descriptor_initializer_ftp_5fmodel_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DownloadReq::kFileNameFieldNumber;
const int DownloadReq::kStartFieldNumber;
const int DownloadReq::kLenFieldNumber;
#endif  // !_MSC_VER

DownloadReq::DownloadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ftp_model.DownloadReq)
}

void DownloadReq::InitAsDefaultInstance() {
}

DownloadReq::DownloadReq(const DownloadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ftp_model.DownloadReq)
}

void DownloadReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_ = GOOGLE_LONGLONG(0);
  len_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadReq::~DownloadReq() {
  // @@protoc_insertion_point(destructor:ftp_model.DownloadReq)
  SharedDtor();
}

void DownloadReq::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void DownloadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadReq_descriptor_;
}

const DownloadReq& DownloadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ftp_5fmodel_2eproto();
  return *default_instance_;
}

DownloadReq* DownloadReq::default_instance_ = NULL;

DownloadReq* DownloadReq::New() const {
  return new DownloadReq;
}

void DownloadReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DownloadReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(start_, len_);
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ftp_model.DownloadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }

      // optional int64 start = 2;
      case 2: {
        if (tag == 16) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_len;
        break;
      }

      // optional int64 len = 3;
      case 3: {
        if (tag == 24) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ftp_model.DownloadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ftp_model.DownloadReq)
  return false;
#undef DO_
}

void DownloadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ftp_model.DownloadReq)
  // optional bytes file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->file_name(), output);
  }

  // optional int64 start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start(), output);
  }

  // optional int64 len = 3;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ftp_model.DownloadReq)
}

::google::protobuf::uint8* DownloadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ftp_model.DownloadReq)
  // optional bytes file_name = 1;
  if (has_file_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file_name(), target);
  }

  // optional int64 start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start(), target);
  }

  // optional int64 len = 3;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ftp_model.DownloadReq)
  return target;
}

int DownloadReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_name());
    }

    // optional int64 start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start());
    }

    // optional int64 len = 3;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadReq::MergeFrom(const DownloadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadReq::CopyFrom(const DownloadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadReq::IsInitialized() const {

  return true;
}

void DownloadReq::Swap(DownloadReq* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(start_, other->start_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadReq_descriptor_;
  metadata.reflection = DownloadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadResp::kRetCodeFieldNumber;
const int DownloadResp::kRetMsgFieldNumber;
const int DownloadResp::kContentFieldNumber;
const int DownloadResp::kTotalFileSizeFieldNumber;
#endif  // !_MSC_VER

DownloadResp::DownloadResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ftp_model.DownloadResp)
}

void DownloadResp::InitAsDefaultInstance() {
}

DownloadResp::DownloadResp(const DownloadResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ftp_model.DownloadResp)
}

void DownloadResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ret_code_ = 0;
  ret_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_file_size_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadResp::~DownloadResp() {
  // @@protoc_insertion_point(destructor:ftp_model.DownloadResp)
  SharedDtor();
}

void DownloadResp::SharedDtor() {
  if (ret_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ret_msg_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void DownloadResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadResp_descriptor_;
}

const DownloadResp& DownloadResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ftp_5fmodel_2eproto();
  return *default_instance_;
}

DownloadResp* DownloadResp::default_instance_ = NULL;

DownloadResp* DownloadResp::New() const {
  return new DownloadResp;
}

void DownloadResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DownloadResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(total_file_size_, ret_code_);
    if (has_ret_msg()) {
      if (ret_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ret_msg_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ftp_model.DownloadResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ret_msg;
        break;
      }

      // optional bytes ret_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_ret_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional bytes content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_file_size;
        break;
      }

      // optional int64 total_file_size = 4;
      case 4: {
        if (tag == 32) {
         parse_total_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_file_size_)));
          set_has_total_file_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ftp_model.DownloadResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ftp_model.DownloadResp)
  return false;
#undef DO_
}

void DownloadResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ftp_model.DownloadResp)
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional bytes ret_msg = 2;
  if (has_ret_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ret_msg(), output);
  }

  // optional bytes content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->content(), output);
  }

  // optional int64 total_file_size = 4;
  if (has_total_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_file_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ftp_model.DownloadResp)
}

::google::protobuf::uint8* DownloadResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ftp_model.DownloadResp)
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional bytes ret_msg = 2;
  if (has_ret_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ret_msg(), target);
  }

  // optional bytes content = 3;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  // optional int64 total_file_size = 4;
  if (has_total_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->total_file_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ftp_model.DownloadResp)
  return target;
}

int DownloadResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional bytes ret_msg = 2;
    if (has_ret_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_msg());
    }

    // optional bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional int64 total_file_size = 4;
    if (has_total_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_file_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadResp::MergeFrom(const DownloadResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_ret_msg()) {
      set_ret_msg(from.ret_msg());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_total_file_size()) {
      set_total_file_size(from.total_file_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadResp::CopyFrom(const DownloadResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadResp::IsInitialized() const {

  return true;
}

void DownloadResp::Swap(DownloadResp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(ret_msg_, other->ret_msg_);
    std::swap(content_, other->content_);
    std::swap(total_file_size_, other->total_file_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadResp_descriptor_;
  metadata.reflection = DownloadResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadReq::kFileNameFieldNumber;
const int UploadReq::kStartFieldNumber;
const int UploadReq::kLenFieldNumber;
#endif  // !_MSC_VER

UploadReq::UploadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ftp_model.UploadReq)
}

void UploadReq::InitAsDefaultInstance() {
}

UploadReq::UploadReq(const UploadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ftp_model.UploadReq)
}

void UploadReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_ = 0;
  len_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadReq::~UploadReq() {
  // @@protoc_insertion_point(destructor:ftp_model.UploadReq)
  SharedDtor();
}

void UploadReq::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void UploadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadReq_descriptor_;
}

const UploadReq& UploadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ftp_5fmodel_2eproto();
  return *default_instance_;
}

UploadReq* UploadReq::default_instance_ = NULL;

UploadReq* UploadReq::New() const {
  return new UploadReq;
}

void UploadReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UploadReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(start_, len_);
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ftp_model.UploadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }

      // optional int32 start = 2;
      case 2: {
        if (tag == 16) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_len;
        break;
      }

      // optional int32 len = 3;
      case 3: {
        if (tag == 24) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ftp_model.UploadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ftp_model.UploadReq)
  return false;
#undef DO_
}

void UploadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ftp_model.UploadReq)
  // optional bytes file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->file_name(), output);
  }

  // optional int32 start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start(), output);
  }

  // optional int32 len = 3;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ftp_model.UploadReq)
}

::google::protobuf::uint8* UploadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ftp_model.UploadReq)
  // optional bytes file_name = 1;
  if (has_file_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->file_name(), target);
  }

  // optional int32 start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start(), target);
  }

  // optional int32 len = 3;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ftp_model.UploadReq)
  return target;
}

int UploadReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_name());
    }

    // optional int32 start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // optional int32 len = 3;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadReq::MergeFrom(const UploadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadReq::CopyFrom(const UploadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadReq::IsInitialized() const {

  return true;
}

void UploadReq::Swap(UploadReq* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(start_, other->start_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadReq_descriptor_;
  metadata.reflection = UploadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadResp::kRetCodeFieldNumber;
const int UploadResp::kRetMsgFieldNumber;
#endif  // !_MSC_VER

UploadResp::UploadResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ftp_model.UploadResp)
}

void UploadResp::InitAsDefaultInstance() {
}

UploadResp::UploadResp(const UploadResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ftp_model.UploadResp)
}

void UploadResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ret_code_ = 0;
  ret_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadResp::~UploadResp() {
  // @@protoc_insertion_point(destructor:ftp_model.UploadResp)
  SharedDtor();
}

void UploadResp::SharedDtor() {
  if (ret_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ret_msg_;
  }
  if (this != default_instance_) {
  }
}

void UploadResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadResp_descriptor_;
}

const UploadResp& UploadResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ftp_5fmodel_2eproto();
  return *default_instance_;
}

UploadResp* UploadResp::default_instance_ = NULL;

UploadResp* UploadResp::New() const {
  return new UploadResp;
}

void UploadResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    ret_code_ = 0;
    if (has_ret_msg()) {
      if (ret_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ret_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ftp_model.UploadResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ret_msg;
        break;
      }

      // optional bytes ret_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_ret_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ftp_model.UploadResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ftp_model.UploadResp)
  return false;
#undef DO_
}

void UploadResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ftp_model.UploadResp)
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional bytes ret_msg = 2;
  if (has_ret_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ret_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ftp_model.UploadResp)
}

::google::protobuf::uint8* UploadResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ftp_model.UploadResp)
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional bytes ret_msg = 2;
  if (has_ret_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ret_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ftp_model.UploadResp)
  return target;
}

int UploadResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional bytes ret_msg = 2;
    if (has_ret_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadResp::MergeFrom(const UploadResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_ret_msg()) {
      set_ret_msg(from.ret_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadResp::CopyFrom(const UploadResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadResp::IsInitialized() const {

  return true;
}

void UploadResp::Swap(UploadResp* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(ret_msg_, other->ret_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadResp_descriptor_;
  metadata.reflection = UploadResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ftp_model

// @@protoc_insertion_point(global_scope)
