// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ftp_model.proto

#ifndef PROTOBUF_ftp_5fmodel_2eproto__INCLUDED
#define PROTOBUF_ftp_5fmodel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ftp_model {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ftp_5fmodel_2eproto();
void protobuf_AssignDesc_ftp_5fmodel_2eproto();
void protobuf_ShutdownFile_ftp_5fmodel_2eproto();

class DownloadReq;
class DownloadResp;
class UploadReq;
class UploadResp;

// ===================================================================

class DownloadReq : public ::google::protobuf::Message {
 public:
  DownloadReq();
  virtual ~DownloadReq();

  DownloadReq(const DownloadReq& from);

  inline DownloadReq& operator=(const DownloadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadReq& default_instance();

  void Swap(DownloadReq* other);

  // implements Message ----------------------------------------------

  DownloadReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadReq& from);
  void MergeFrom(const DownloadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes file_name = 1;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const void* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // optional int64 start = 2;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 2;
  inline ::google::protobuf::int64 start() const;
  inline void set_start(::google::protobuf::int64 value);

  // optional int64 len = 3;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 3;
  inline ::google::protobuf::int64 len() const;
  inline void set_len(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ftp_model.DownloadReq)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* file_name_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int64 len_;
  friend void  protobuf_AddDesc_ftp_5fmodel_2eproto();
  friend void protobuf_AssignDesc_ftp_5fmodel_2eproto();
  friend void protobuf_ShutdownFile_ftp_5fmodel_2eproto();

  void InitAsDefaultInstance();
  static DownloadReq* default_instance_;
};
// -------------------------------------------------------------------

class DownloadResp : public ::google::protobuf::Message {
 public:
  DownloadResp();
  virtual ~DownloadResp();

  DownloadResp(const DownloadResp& from);

  inline DownloadResp& operator=(const DownloadResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadResp& default_instance();

  void Swap(DownloadResp* other);

  // implements Message ----------------------------------------------

  DownloadResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownloadResp& from);
  void MergeFrom(const DownloadResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional bytes ret_msg = 2;
  inline bool has_ret_msg() const;
  inline void clear_ret_msg();
  static const int kRetMsgFieldNumber = 2;
  inline const ::std::string& ret_msg() const;
  inline void set_ret_msg(const ::std::string& value);
  inline void set_ret_msg(const char* value);
  inline void set_ret_msg(const void* value, size_t size);
  inline ::std::string* mutable_ret_msg();
  inline ::std::string* release_ret_msg();
  inline void set_allocated_ret_msg(::std::string* ret_msg);

  // optional bytes content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int64 total_file_size = 4;
  inline bool has_total_file_size() const;
  inline void clear_total_file_size();
  static const int kTotalFileSizeFieldNumber = 4;
  inline ::google::protobuf::int64 total_file_size() const;
  inline void set_total_file_size(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ftp_model.DownloadResp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_ret_msg();
  inline void clear_has_ret_msg();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_total_file_size();
  inline void clear_has_total_file_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ret_msg_;
  ::std::string* content_;
  ::google::protobuf::int64 total_file_size_;
  ::google::protobuf::int32 ret_code_;
  friend void  protobuf_AddDesc_ftp_5fmodel_2eproto();
  friend void protobuf_AssignDesc_ftp_5fmodel_2eproto();
  friend void protobuf_ShutdownFile_ftp_5fmodel_2eproto();

  void InitAsDefaultInstance();
  static DownloadResp* default_instance_;
};
// -------------------------------------------------------------------

class UploadReq : public ::google::protobuf::Message {
 public:
  UploadReq();
  virtual ~UploadReq();

  UploadReq(const UploadReq& from);

  inline UploadReq& operator=(const UploadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadReq& default_instance();

  void Swap(UploadReq* other);

  // implements Message ----------------------------------------------

  UploadReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadReq& from);
  void MergeFrom(const UploadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes file_name = 1;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const void* value, size_t size);
  inline ::std::string* mutable_file_name();
  inline ::std::string* release_file_name();
  inline void set_allocated_file_name(::std::string* file_name);

  // optional int32 start = 2;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 2;
  inline ::google::protobuf::int32 start() const;
  inline void set_start(::google::protobuf::int32 value);

  // optional int32 len = 3;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 3;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ftp_model.UploadReq)
 private:
  inline void set_has_file_name();
  inline void clear_has_file_name();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* file_name_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int32 len_;
  friend void  protobuf_AddDesc_ftp_5fmodel_2eproto();
  friend void protobuf_AssignDesc_ftp_5fmodel_2eproto();
  friend void protobuf_ShutdownFile_ftp_5fmodel_2eproto();

  void InitAsDefaultInstance();
  static UploadReq* default_instance_;
};
// -------------------------------------------------------------------

class UploadResp : public ::google::protobuf::Message {
 public:
  UploadResp();
  virtual ~UploadResp();

  UploadResp(const UploadResp& from);

  inline UploadResp& operator=(const UploadResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadResp& default_instance();

  void Swap(UploadResp* other);

  // implements Message ----------------------------------------------

  UploadResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadResp& from);
  void MergeFrom(const UploadResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional bytes ret_msg = 2;
  inline bool has_ret_msg() const;
  inline void clear_ret_msg();
  static const int kRetMsgFieldNumber = 2;
  inline const ::std::string& ret_msg() const;
  inline void set_ret_msg(const ::std::string& value);
  inline void set_ret_msg(const char* value);
  inline void set_ret_msg(const void* value, size_t size);
  inline ::std::string* mutable_ret_msg();
  inline ::std::string* release_ret_msg();
  inline void set_allocated_ret_msg(::std::string* ret_msg);

  // @@protoc_insertion_point(class_scope:ftp_model.UploadResp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_ret_msg();
  inline void clear_has_ret_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ret_msg_;
  ::google::protobuf::int32 ret_code_;
  friend void  protobuf_AddDesc_ftp_5fmodel_2eproto();
  friend void protobuf_AssignDesc_ftp_5fmodel_2eproto();
  friend void protobuf_ShutdownFile_ftp_5fmodel_2eproto();

  void InitAsDefaultInstance();
  static UploadResp* default_instance_;
};
// ===================================================================


// ===================================================================

// DownloadReq

// optional bytes file_name = 1;
inline bool DownloadReq::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadReq::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadReq::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadReq::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& DownloadReq::file_name() const {
  // @@protoc_insertion_point(field_get:ftp_model.DownloadReq.file_name)
  return *file_name_;
}
inline void DownloadReq::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:ftp_model.DownloadReq.file_name)
}
inline void DownloadReq::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ftp_model.DownloadReq.file_name)
}
inline void DownloadReq::set_file_name(const void* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ftp_model.DownloadReq.file_name)
}
inline ::std::string* DownloadReq::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ftp_model.DownloadReq.file_name)
  return file_name_;
}
inline ::std::string* DownloadReq::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DownloadReq::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ftp_model.DownloadReq.file_name)
}

// optional int64 start = 2;
inline bool DownloadReq::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadReq::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadReq::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadReq::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
  clear_has_start();
}
inline ::google::protobuf::int64 DownloadReq::start() const {
  // @@protoc_insertion_point(field_get:ftp_model.DownloadReq.start)
  return start_;
}
inline void DownloadReq::set_start(::google::protobuf::int64 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:ftp_model.DownloadReq.start)
}

// optional int64 len = 3;
inline bool DownloadReq::has_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadReq::set_has_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadReq::clear_has_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadReq::clear_len() {
  len_ = GOOGLE_LONGLONG(0);
  clear_has_len();
}
inline ::google::protobuf::int64 DownloadReq::len() const {
  // @@protoc_insertion_point(field_get:ftp_model.DownloadReq.len)
  return len_;
}
inline void DownloadReq::set_len(::google::protobuf::int64 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:ftp_model.DownloadReq.len)
}

// -------------------------------------------------------------------

// DownloadResp

// optional int32 ret_code = 1;
inline bool DownloadResp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DownloadResp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DownloadResp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DownloadResp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 DownloadResp::ret_code() const {
  // @@protoc_insertion_point(field_get:ftp_model.DownloadResp.ret_code)
  return ret_code_;
}
inline void DownloadResp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:ftp_model.DownloadResp.ret_code)
}

// optional bytes ret_msg = 2;
inline bool DownloadResp::has_ret_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DownloadResp::set_has_ret_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DownloadResp::clear_has_ret_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DownloadResp::clear_ret_msg() {
  if (ret_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_msg_->clear();
  }
  clear_has_ret_msg();
}
inline const ::std::string& DownloadResp::ret_msg() const {
  // @@protoc_insertion_point(field_get:ftp_model.DownloadResp.ret_msg)
  return *ret_msg_;
}
inline void DownloadResp::set_ret_msg(const ::std::string& value) {
  set_has_ret_msg();
  if (ret_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_msg_ = new ::std::string;
  }
  ret_msg_->assign(value);
  // @@protoc_insertion_point(field_set:ftp_model.DownloadResp.ret_msg)
}
inline void DownloadResp::set_ret_msg(const char* value) {
  set_has_ret_msg();
  if (ret_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_msg_ = new ::std::string;
  }
  ret_msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:ftp_model.DownloadResp.ret_msg)
}
inline void DownloadResp::set_ret_msg(const void* value, size_t size) {
  set_has_ret_msg();
  if (ret_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_msg_ = new ::std::string;
  }
  ret_msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ftp_model.DownloadResp.ret_msg)
}
inline ::std::string* DownloadResp::mutable_ret_msg() {
  set_has_ret_msg();
  if (ret_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ftp_model.DownloadResp.ret_msg)
  return ret_msg_;
}
inline ::std::string* DownloadResp::release_ret_msg() {
  clear_has_ret_msg();
  if (ret_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ret_msg_;
    ret_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DownloadResp::set_allocated_ret_msg(::std::string* ret_msg) {
  if (ret_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ret_msg_;
  }
  if (ret_msg) {
    set_has_ret_msg();
    ret_msg_ = ret_msg;
  } else {
    clear_has_ret_msg();
    ret_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ftp_model.DownloadResp.ret_msg)
}

// optional bytes content = 3;
inline bool DownloadResp::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DownloadResp::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DownloadResp::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DownloadResp::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& DownloadResp::content() const {
  // @@protoc_insertion_point(field_get:ftp_model.DownloadResp.content)
  return *content_;
}
inline void DownloadResp::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:ftp_model.DownloadResp.content)
}
inline void DownloadResp::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:ftp_model.DownloadResp.content)
}
inline void DownloadResp::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ftp_model.DownloadResp.content)
}
inline ::std::string* DownloadResp::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ftp_model.DownloadResp.content)
  return content_;
}
inline ::std::string* DownloadResp::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DownloadResp::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ftp_model.DownloadResp.content)
}

// optional int64 total_file_size = 4;
inline bool DownloadResp::has_total_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DownloadResp::set_has_total_file_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DownloadResp::clear_has_total_file_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DownloadResp::clear_total_file_size() {
  total_file_size_ = GOOGLE_LONGLONG(0);
  clear_has_total_file_size();
}
inline ::google::protobuf::int64 DownloadResp::total_file_size() const {
  // @@protoc_insertion_point(field_get:ftp_model.DownloadResp.total_file_size)
  return total_file_size_;
}
inline void DownloadResp::set_total_file_size(::google::protobuf::int64 value) {
  set_has_total_file_size();
  total_file_size_ = value;
  // @@protoc_insertion_point(field_set:ftp_model.DownloadResp.total_file_size)
}

// -------------------------------------------------------------------

// UploadReq

// optional bytes file_name = 1;
inline bool UploadReq::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadReq::set_has_file_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadReq::clear_has_file_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadReq::clear_file_name() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_->clear();
  }
  clear_has_file_name();
}
inline const ::std::string& UploadReq::file_name() const {
  // @@protoc_insertion_point(field_get:ftp_model.UploadReq.file_name)
  return *file_name_;
}
inline void UploadReq::set_file_name(const ::std::string& value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set:ftp_model.UploadReq.file_name)
}
inline void UploadReq::set_file_name(const char* value) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ftp_model.UploadReq.file_name)
}
inline void UploadReq::set_file_name(const void* value, size_t size) {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ftp_model.UploadReq.file_name)
}
inline ::std::string* UploadReq::mutable_file_name() {
  set_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ftp_model.UploadReq.file_name)
  return file_name_;
}
inline ::std::string* UploadReq::release_file_name() {
  clear_has_file_name();
  if (file_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_name_;
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UploadReq::set_allocated_file_name(::std::string* file_name) {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (file_name) {
    set_has_file_name();
    file_name_ = file_name;
  } else {
    clear_has_file_name();
    file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ftp_model.UploadReq.file_name)
}

// optional int32 start = 2;
inline bool UploadReq::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadReq::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadReq::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadReq::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline ::google::protobuf::int32 UploadReq::start() const {
  // @@protoc_insertion_point(field_get:ftp_model.UploadReq.start)
  return start_;
}
inline void UploadReq::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:ftp_model.UploadReq.start)
}

// optional int32 len = 3;
inline bool UploadReq::has_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadReq::set_has_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadReq::clear_has_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadReq::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 UploadReq::len() const {
  // @@protoc_insertion_point(field_get:ftp_model.UploadReq.len)
  return len_;
}
inline void UploadReq::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:ftp_model.UploadReq.len)
}

// -------------------------------------------------------------------

// UploadResp

// optional int32 ret_code = 1;
inline bool UploadResp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadResp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadResp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadResp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 UploadResp::ret_code() const {
  // @@protoc_insertion_point(field_get:ftp_model.UploadResp.ret_code)
  return ret_code_;
}
inline void UploadResp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:ftp_model.UploadResp.ret_code)
}

// optional bytes ret_msg = 2;
inline bool UploadResp::has_ret_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadResp::set_has_ret_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadResp::clear_has_ret_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadResp::clear_ret_msg() {
  if (ret_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_msg_->clear();
  }
  clear_has_ret_msg();
}
inline const ::std::string& UploadResp::ret_msg() const {
  // @@protoc_insertion_point(field_get:ftp_model.UploadResp.ret_msg)
  return *ret_msg_;
}
inline void UploadResp::set_ret_msg(const ::std::string& value) {
  set_has_ret_msg();
  if (ret_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_msg_ = new ::std::string;
  }
  ret_msg_->assign(value);
  // @@protoc_insertion_point(field_set:ftp_model.UploadResp.ret_msg)
}
inline void UploadResp::set_ret_msg(const char* value) {
  set_has_ret_msg();
  if (ret_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_msg_ = new ::std::string;
  }
  ret_msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:ftp_model.UploadResp.ret_msg)
}
inline void UploadResp::set_ret_msg(const void* value, size_t size) {
  set_has_ret_msg();
  if (ret_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_msg_ = new ::std::string;
  }
  ret_msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ftp_model.UploadResp.ret_msg)
}
inline ::std::string* UploadResp::mutable_ret_msg() {
  set_has_ret_msg();
  if (ret_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ftp_model.UploadResp.ret_msg)
  return ret_msg_;
}
inline ::std::string* UploadResp::release_ret_msg() {
  clear_has_ret_msg();
  if (ret_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ret_msg_;
    ret_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UploadResp::set_allocated_ret_msg(::std::string* ret_msg) {
  if (ret_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ret_msg_;
  }
  if (ret_msg) {
    set_has_ret_msg();
    ret_msg_ = ret_msg;
  } else {
    clear_has_ret_msg();
    ret_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ftp_model.UploadResp.ret_msg)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ftp_model

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ftp_5fmodel_2eproto__INCLUDED
