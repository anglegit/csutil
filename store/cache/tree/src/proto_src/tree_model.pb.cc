// Generated by the protocCSUTILfer compiler.  DO NOT EDIT!
// source: tree_model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tree_model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tree_model {

namespace {

const ::google::protobuf::Descriptor* TreeNodeHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeNodeHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreeNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* DumpNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DumpNode_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tree_5fmodel_2eproto() {
  protobuf_AddDesc_tree_5fmodel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tree_model.proto");
  GOOGLE_CHECK(file != NULL);
  TreeNodeHead_descriptor_ = file->message_type(0);
  static const int TreeNodeHead_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNodeHead, trx_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNodeHead, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNodeHead, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNodeHead, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNodeHead, modify_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNodeHead, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNodeHead, children_version_),
  };
  TreeNodeHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreeNodeHead_descriptor_,
      TreeNodeHead::default_instance_,
      TreeNodeHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNodeHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNodeHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreeNodeHead));
  TreeNode_descriptor_ = file->message_type(1);
  static const int TreeNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNode, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNode, children_nodes_),
  };
  TreeNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreeNode_descriptor_,
      TreeNode::default_instance_,
      TreeNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreeNode));
  DumpNode_descriptor_ = file->message_type(2);
  static const int DumpNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpNode, trx_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpNode, content_),
  };
  DumpNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DumpNode_descriptor_,
      DumpNode::default_instance_,
      DumpNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DumpNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DumpNode));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tree_5fmodel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreeNodeHead_descriptor_, &TreeNodeHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreeNode_descriptor_, &TreeNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DumpNode_descriptor_, &DumpNode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tree_5fmodel_2eproto() {
  delete TreeNodeHead::default_instance_;
  delete TreeNodeHead_reflection_;
  delete TreeNode::default_instance_;
  delete TreeNode_reflection_;
  delete DumpNode::default_instance_;
  delete DumpNode_reflection_;
}

void protobuf_AddDesc_tree_5fmodel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020tree_model.proto\022\ntree_model\"\220\001\n\014TreeN"
    "odeHead\022\016\n\006trx_id\030\001 \001(\004\022\014\n\004name\030\013 \001(\014\022\r\n"
    "\005value\030\014 \001(\014\022\023\n\013create_time\030\r \001(\003\022\023\n\013mod"
    "ify_time\030\016 \001(\003\022\017\n\007version\030\017 \001(\003\022\030\n\020child"
    "ren_version\030\020 \001(\003\"`\n\010TreeNode\022&\n\004head\030\001 "
    "\001(\0132\030.tree_model.TreeNodeHead\022,\n\016childre"
    "n_nodes\030\002 \003(\0132\024.tree_model.TreeNode\"+\n\010D"
    "umpNode\022\016\n\006trx_id\030\001 \001(\004\022\017\n\007content\030\002 \001(\014", 320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tree_model.proto", &protobuf_RegisterTypes);
  TreeNodeHead::default_instance_ = new TreeNodeHead();
  TreeNode::default_instance_ = new TreeNode();
  DumpNode::default_instance_ = new DumpNode();
  TreeNodeHead::default_instance_->InitAsDefaultInstance();
  TreeNode::default_instance_->InitAsDefaultInstance();
  DumpNode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tree_5fmodel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tree_5fmodel_2eproto {
  StaticDescriptorInitializer_tree_5fmodel_2eproto() {
    protobuf_AddDesc_tree_5fmodel_2eproto();
  }
} static_descriptor_initializer_tree_5fmodel_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TreeNodeHead::kTrxIdFieldNumber;
const int TreeNodeHead::kNameFieldNumber;
const int TreeNodeHead::kValueFieldNumber;
const int TreeNodeHead::kCreateTimeFieldNumber;
const int TreeNodeHead::kModifyTimeFieldNumber;
const int TreeNodeHead::kVersionFieldNumber;
const int TreeNodeHead::kChildrenVersionFieldNumber;
#endif  // !_MSC_VER

TreeNodeHead::TreeNodeHead()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tree_model.TreeNodeHead)
}

void TreeNodeHead::InitAsDefaultInstance() {
}

TreeNodeHead::TreeNodeHead(const TreeNodeHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tree_model.TreeNodeHead)
}

void TreeNodeHead::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  trx_id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_ = GOOGLE_LONGLONG(0);
  modify_time_ = GOOGLE_LONGLONG(0);
  version_ = GOOGLE_LONGLONG(0);
  children_version_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreeNodeHead::~TreeNodeHead() {
  // @@protoc_insertion_point(destructor:tree_model.TreeNodeHead)
  SharedDtor();
}

void TreeNodeHead::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void TreeNodeHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeNodeHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeNodeHead_descriptor_;
}

const TreeNodeHead& TreeNodeHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tree_5fmodel_2eproto();
  return *default_instance_;
}

TreeNodeHead* TreeNodeHead::default_instance_ = NULL;

TreeNodeHead* TreeNodeHead::New() const {
  return new TreeNodeHead;
}

void TreeNodeHead::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TreeNodeHead*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(create_time_, children_version_);
    trx_id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreeNodeHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tree_model.TreeNodeHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 trx_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trx_id_)));
          set_has_trx_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_name;
        break;
      }

      // optional bytes name = 11;
      case 11: {
        if (tag == 90) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_value;
        break;
      }

      // optional bytes value = 12;
      case 12: {
        if (tag == 98) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_create_time;
        break;
      }

      // optional int64 create_time = 13;
      case 13: {
        if (tag == 104) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_modify_time;
        break;
      }

      // optional int64 modify_time = 14;
      case 14: {
        if (tag == 112) {
         parse_modify_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &modify_time_)));
          set_has_modify_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_version;
        break;
      }

      // optional int64 version = 15;
      case 15: {
        if (tag == 120) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_children_version;
        break;
      }

      // optional int64 children_version = 16;
      case 16: {
        if (tag == 128) {
         parse_children_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &children_version_)));
          set_has_children_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tree_model.TreeNodeHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tree_model.TreeNodeHead)
  return false;
#undef DO_
}

void TreeNodeHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tree_model.TreeNodeHead)
  // optional uint64 trx_id = 1;
  if (has_trx_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->trx_id(), output);
  }

  // optional bytes name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->name(), output);
  }

  // optional bytes value = 12;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->value(), output);
  }

  // optional int64 create_time = 13;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->create_time(), output);
  }

  // optional int64 modify_time = 14;
  if (has_modify_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->modify_time(), output);
  }

  // optional int64 version = 15;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->version(), output);
  }

  // optional int64 children_version = 16;
  if (has_children_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->children_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tree_model.TreeNodeHead)
}

::google::protobuf::uint8* TreeNodeHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tree_model.TreeNodeHead)
  // optional uint64 trx_id = 1;
  if (has_trx_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->trx_id(), target);
  }

  // optional bytes name = 11;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->name(), target);
  }

  // optional bytes value = 12;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->value(), target);
  }

  // optional int64 create_time = 13;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->create_time(), target);
  }

  // optional int64 modify_time = 14;
  if (has_modify_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->modify_time(), target);
  }

  // optional int64 version = 15;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->version(), target);
  }

  // optional int64 children_version = 16;
  if (has_children_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->children_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tree_model.TreeNodeHead)
  return target;
}

int TreeNodeHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 trx_id = 1;
    if (has_trx_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trx_id());
    }

    // optional bytes name = 11;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes value = 12;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional int64 create_time = 13;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

    // optional int64 modify_time = 14;
    if (has_modify_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->modify_time());
    }

    // optional int64 version = 15;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version());
    }

    // optional int64 children_version = 16;
    if (has_children_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->children_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeNodeHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreeNodeHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreeNodeHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreeNodeHead::MergeFrom(const TreeNodeHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trx_id()) {
      set_trx_id(from.trx_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_modify_time()) {
      set_modify_time(from.modify_time());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_children_version()) {
      set_children_version(from.children_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreeNodeHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeNodeHead::CopyFrom(const TreeNodeHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNodeHead::IsInitialized() const {

  return true;
}

void TreeNodeHead::Swap(TreeNodeHead* other) {
  if (other != this) {
    std::swap(trx_id_, other->trx_id_);
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(create_time_, other->create_time_);
    std::swap(modify_time_, other->modify_time_);
    std::swap(version_, other->version_);
    std::swap(children_version_, other->children_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreeNodeHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeNodeHead_descriptor_;
  metadata.reflection = TreeNodeHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreeNode::kHeadFieldNumber;
const int TreeNode::kChildrenNodesFieldNumber;
#endif  // !_MSC_VER

TreeNode::TreeNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tree_model.TreeNode)
}

void TreeNode::InitAsDefaultInstance() {
  head_ = const_cast< ::tree_model::TreeNodeHead*>(&::tree_model::TreeNodeHead::default_instance());
}

TreeNode::TreeNode(const TreeNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tree_model.TreeNode)
}

void TreeNode::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreeNode::~TreeNode() {
  // @@protoc_insertion_point(destructor:tree_model.TreeNode)
  SharedDtor();
}

void TreeNode::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void TreeNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeNode_descriptor_;
}

const TreeNode& TreeNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tree_5fmodel_2eproto();
  return *default_instance_;
}

TreeNode* TreeNode::default_instance_ = NULL;

TreeNode* TreeNode::New() const {
  return new TreeNode;
}

void TreeNode::Clear() {
  if (has_head()) {
    if (head_ != NULL) head_->::tree_model::TreeNodeHead::Clear();
  }
  children_nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tree_model.TreeNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tree_model.TreeNodeHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_children_nodes;
        break;
      }

      // repeated .tree_model.TreeNode children_nodes = 2;
      case 2: {
        if (tag == 18) {
         parse_children_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_children_nodes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tree_model.TreeNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tree_model.TreeNode)
  return false;
#undef DO_
}

void TreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tree_model.TreeNode)
  // optional .tree_model.TreeNodeHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->head(), output);
  }

  // repeated .tree_model.TreeNode children_nodes = 2;
  for (int i = 0; i < this->children_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->children_nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tree_model.TreeNode)
}

::google::protobuf::uint8* TreeNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tree_model.TreeNode)
  // optional .tree_model.TreeNodeHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->head(), target);
  }

  // repeated .tree_model.TreeNode children_nodes = 2;
  for (int i = 0; i < this->children_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->children_nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tree_model.TreeNode)
  return target;
}

int TreeNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .tree_model.TreeNodeHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  // repeated .tree_model.TreeNode children_nodes = 2;
  total_size += 1 * this->children_nodes_size();
  for (int i = 0; i < this->children_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children_nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreeNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreeNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreeNode::MergeFrom(const TreeNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_nodes_.MergeFrom(from.children_nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::tree_model::TreeNodeHead::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreeNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeNode::CopyFrom(const TreeNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNode::IsInitialized() const {

  return true;
}

void TreeNode::Swap(TreeNode* other) {
  if (other != this) {
    std::swap(head_, other->head_);
    children_nodes_.Swap(&other->children_nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreeNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeNode_descriptor_;
  metadata.reflection = TreeNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DumpNode::kTrxIdFieldNumber;
const int DumpNode::kContentFieldNumber;
#endif  // !_MSC_VER

DumpNode::DumpNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tree_model.DumpNode)
}

void DumpNode::InitAsDefaultInstance() {
}

DumpNode::DumpNode(const DumpNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tree_model.DumpNode)
}

void DumpNode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  trx_id_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DumpNode::~DumpNode() {
  // @@protoc_insertion_point(destructor:tree_model.DumpNode)
  SharedDtor();
}

void DumpNode::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void DumpNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DumpNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DumpNode_descriptor_;
}

const DumpNode& DumpNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tree_5fmodel_2eproto();
  return *default_instance_;
}

DumpNode* DumpNode::default_instance_ = NULL;

DumpNode* DumpNode::New() const {
  return new DumpNode;
}

void DumpNode::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    trx_id_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DumpNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tree_model.DumpNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 trx_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trx_id_)));
          set_has_trx_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional bytes content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tree_model.DumpNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tree_model.DumpNode)
  return false;
#undef DO_
}

void DumpNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tree_model.DumpNode)
  // optional uint64 trx_id = 1;
  if (has_trx_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->trx_id(), output);
  }

  // optional bytes content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tree_model.DumpNode)
}

::google::protobuf::uint8* DumpNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tree_model.DumpNode)
  // optional uint64 trx_id = 1;
  if (has_trx_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->trx_id(), target);
  }

  // optional bytes content = 2;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tree_model.DumpNode)
  return target;
}

int DumpNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 trx_id = 1;
    if (has_trx_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trx_id());
    }

    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DumpNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DumpNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DumpNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DumpNode::MergeFrom(const DumpNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trx_id()) {
      set_trx_id(from.trx_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DumpNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpNode::CopyFrom(const DumpNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpNode::IsInitialized() const {

  return true;
}

void DumpNode::Swap(DumpNode* other) {
  if (other != this) {
    std::swap(trx_id_, other->trx_id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DumpNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DumpNode_descriptor_;
  metadata.reflection = DumpNode_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tree_model

// @@protoc_insertion_point(global_scope)
